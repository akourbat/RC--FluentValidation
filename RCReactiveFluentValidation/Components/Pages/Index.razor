@page "/"
@using System.Reactive.Linq;

<h1>Hello, world!</h1>

Welcome to your new app.

<hr />

<div class="col-md-4">
    <EditForm Model="@Person" OnValidSubmit="@SubmitValidForm">
        <FluentValidationValidator OnValidation="@CanSubmit" Validator="@validator"/>
        <ValidationSummary />
        

        <div class="form-group">
            <label for="name">Name</label>
            <InputText Id="name" Class="form-control" bind-Value="@Person.Name" />
            <small id="name" class="form-text text-muted">Please, enter your name</small>
            <small><ValidationMessage For="@(() => Person.Name)" /></small>
        </div>

        <div class="form-group">
            <label for="age">Age</label>
            <InputNumber Id="age" Class="form-control" bind-Value="@Person.Age" />
            <small id="age" class="form-text text-muted">Please, enter your age</small>
            <small><ValidationMessage For="@(() => Person.Age)" /></small>
        </div>

        <div class="form-group">
            <label for="email">Email</label>
            <InputText Id="email" Class="form-control" bind-Value="@Person.EmailAddress" />
            <small id="email" class="form-text text-muted">Please, enter your email address</small>
            <small><ValidationMessage For="@(() => Person.EmailAddress)" /></small>
        </div>
        <button type="submit" class="btn btn-primary" disabled ="@submitDisabled">Submit</button>
    </EditForm>
    <h2>@Success</h2>
</div>

@functions {

    Person Person { get; set; } = new Person();

    PersonValidator validator = new PersonValidator();

    string Success = "";
    bool submitDisabled = true;

    void CanSubmit(bool flag)
    {
        submitDisabled = !flag;
    }

    void SubmitValidForm()
    {
        Success = "Form Submitted Successfully!";
    }
}
